
module Main where

slice :: Int -> [a] -> [[a]]
slice x xs | length xs == 0 = []
           | x > (length xs) = [xs]
           | otherwise = (take x xs) : (slice x $ drop x xs)


diagonalResult :: String -> [String]
diagonalResult x = [ show x,
                     show x ] 

myenum :: Int -> Int
myenum x = let xx = x
             in (\_ -> set xx (xx + 1)) 
 

solution :: [Int] -> [String]
solution = undefined



readIntString :: String -> Int
readIntString x = read x :: Int


inputOf :: String -> [Int]
inputOf = map readIntString . words 


solve :: String -> String
solve = undefined -- unwords . solution . inputOf


main :: IO()
main = interact solve
